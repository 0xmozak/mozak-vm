name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  check-runner:
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.set-runner.outputs.runner-label }}

    steps:
      - name: Set runner
        id: set-runner
        run: |
          runners=$(curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.READ_RUNNERS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -L https://api.github.com/repos/${{ github.repository }}/actions/runners || echo "")
          available=$(echo "$runners" | jq '(.runners // [])[] | select(.status == "online" and .busy == false and .labels[] .name == "self-hosted")')
            echo "runner1 $runners"

          if [ -n "$available" ]; then
            echo "available1"
            echo "runner-label=self-hosted" >> $GITHUB_OUTPUT
            exit 0
          fi

          runners=$(curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.READ_RUNNERS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -L https://api.github.com/orgs/${{ github.repository_owner }}/actions/runners || echo "")
          echo "runner2 $runners"
          available=$(echo "$runners" | jq '(.runners // [])[] | select(.status == "online" and .busy == false and .labels[] .name == "self-hosted")')
          if [ -n "$available" ]; then
            echo "available2"
            echo "runner-label=self-hosted" >> $GITHUB_OUTPUT
          else
            echo "unavailable"
            echo "runner-label=ubuntu-latest" >> $GITHUB_OUTPUT
          fi

  cargo-test:
    if: github.event.pull_request.draft == false
    needs: check-runner
    runs-on: ${{ needs.check-runner.outputs.runner-label }}
    steps:
      - uses: actions/checkout@v3

      - name: Install rust toolkit
        uses: ./.github/actions/rust

      - name: Build fibonacci ELF for benchmarking 
        working-directory: examples/fibonacci 
        run: cargo build --release

      - name: Build fibonacci-input ELF for benchmarking 
        working-directory: examples/fibonacci-input 
        run: cargo build --release
        
      - name: Compile 
        run: cargo nextest run --no-run --locked --all-targets

      - name: Test
        run: MOZAK_STARK_DEBUG=true cargo nextest run --locked --all-targets

  cargo-clippy:
    if: github.event.pull_request.draft == false
    needs: check-runner
    runs-on: ${{ needs.check-runner.outputs.runner-label }}
    steps:
      - uses: actions/checkout@v3

      - name: Install rust toolkit
        uses: ./.github/actions/rust

      - name: Run Clippy linter
        run: cargo clippy --all-features --all-targets -- -D warnings

      - name: Run Clippy linter for sdk
        working-directory: sdk
        run: cargo clippy --all-features -- -D warnings

  cargo-build-examples:
    if: github.event.pull_request.draft == false
    needs: check-runner
    runs-on: ${{ needs.check-runner.outputs.runner-label }}
    steps:
      - uses: actions/checkout@v3

      - name: Install rust toolkit
        uses: ./.github/actions/rust

      - name: Build all examples
        run: |
          cd examples
          git ls-files -z '*/Cargo.toml' | xargs -0 --max-args=1 -- cargo build --manifest-path

  cargo-fmt:
    if: github.event.pull_request.draft == false
    needs: check-runner
    runs-on: ${{ needs.check-runner.outputs.runner-label }}
    steps:
      - uses: actions/checkout@v3

      - name: Install rust toolkit
        uses: ./.github/actions/rust

      - name: Run fmt
        run: cargo fmt --all --check

  taplo-fmt:
    if: github.event.pull_request.draft == false
    needs: check-runner
    runs-on: ${{ needs.check-runner.outputs.runner-label }}
    steps:
      - uses: actions/checkout@v3

      - uses: taiki-e/install-action@v2
        with:
          tool: taplo-cli

      - name: taplo fmt
        run: taplo fmt --check
